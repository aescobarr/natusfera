function Base(){}function extend(object,source){if(object&&source){var key,proto=("function"==typeof source?Function:Object).prototype,i=_HIDDEN.length;if(prototyping)for(;key=_HIDDEN[--i];){var value=source[key];value!=proto[key]&&(_BASE.test(value)?_override(object,key,value):object[key]=value)}for(key in source)if(void 0===proto[key]){var value=source[key];object[key]&&"function"==typeof value&&_BASE.test(value)?_override(object,key,value):object[key]=value}}return object}function _override(object,name,method){var ancestor=object[name];object[name]=function(){var previous=this.base;this.base=ancestor;var returnValue=method.apply(this,arguments);return this.base=previous,returnValue}}function combine(keys,values){values||(values=keys);var hash={};for(var i in keys)hash[i]=values[i];return hash}function format(string){var args=arguments,_FORMAT=new RegExp("%([1-"+arguments.length+"])","g");return String(string).replace(_FORMAT,function(match,index){return index<args.length?args[index]:match})}function match(string,expression){return String(string).match(expression)||[]}function rescape(string){return String(string).replace(_RESCAPE,"\\$1")}function trim(string){return String(string).replace(_LTRIM,"").replace(_RTRIM,"")}function K(k){return function(){return k}}var _slice=Array.prototype.slice,_FORMAT=/%([1-9])/g,_LTRIM=/^\s\s*/,_RTRIM=/\s\s*$/,_RESCAPE=/([\/()[\]{}|*+-.,^$?\\])/g,_BASE=/\bbase\b/,_HIDDEN=["constructor","toString"],prototyping;Base.extend=function(_instance,_static){function klass(){prototyping||_constructor.apply(this,arguments)}prototyping=!0;var _prototype=new this;extend(_prototype,_instance),prototyping=!1;var _constructor=_prototype.constructor;return _prototype.constructor=klass,klass.extend=arguments.callee,extend(klass,_static),klass.prototype=_prototype,klass},Base.prototype.extend=function(source){return extend(this,source)};var _HASH="#",_KEYS="~",_RG_ESCAPE_CHARS=/\\./g,_RG_ESCAPE_BRACKETS=/\(\?[:=!]|\[[^\]]+\]/g,_RG_BRACKETS=/\(/g,RegGrp=Base.extend({constructor:function(values){this[_KEYS]=[],this.merge(values)},exec:function(string){var items=this,keys=this[_KEYS];return String(string).replace(new RegExp(this,this.ignoreCase?"gi":"g"),function(){for(var item,offset=1,i=0;item=items[_HASH+keys[i++]];){var next=offset+item.length+1;if(arguments[offset]){var replacement=item.replacement;switch(typeof replacement){case"function":return replacement.apply(items,_slice.call(arguments,offset,next));case"number":return arguments[offset+replacement];default:return replacement}}offset=next}})},add:function(expression,replacement){expression instanceof RegExp&&(expression=expression.source),this[_HASH+expression]||this[_KEYS].push(String(expression)),this[_HASH+expression]=new RegGrp.Item(expression,replacement)},merge:function(values){for(var i in values)this.add(i,values[i])},toString:function(){return"("+this[_KEYS].join(")|(")+")"}},{IGNORE:"$0",Item:Base.extend({constructor:function(expression,replacement){if(expression=expression instanceof RegExp?expression.source:String(expression),"number"==typeof replacement?replacement=String(replacement):null==replacement&&(replacement=""),"string"==typeof replacement&&/\$(\d+)/.test(replacement))if(/^\$\d+$/.test(replacement))replacement=parseInt(replacement.slice(1));else{var Q=/'/.test(replacement.replace(/\\./g,""))?'"':"'";replacement=replacement.replace(/\n/g,"\\n").replace(/\r/g,"\\r").replace(/\$(\d+)/g,Q+"+(arguments[$1]||"+Q+Q+")+"+Q),replacement=new Function("return "+Q+replacement.replace(/(['"])\1\+(.*)\+\1\1$/,"$1")+Q)}this.length=RegGrp.count(expression),this.replacement=replacement,this.toString=K(expression)}}),count:function(expression){return expression=String(expression).replace(_RG_ESCAPE_CHARS,"").replace(_RG_ESCAPE_BRACKETS,""),match(expression,_RG_BRACKETS).length}});