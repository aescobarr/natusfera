!function(window){if(window.document&&window.Worker){var worker=null,Shapefile=function(o,callback){var t=this,o="string"==typeof o?{shp:o}:o;if(worker)var w=worker;else var path=(o.jsRoot||"")+"/assets/dragdrop/shapefile.js",w=worker=this.worker=new Worker(path);w.onmessage=function(e){t.data=e.date,callback&&callback(e.data)},w.postMessage(["Load",o]),o.dbf&&(this.dbf=new DBF(o.dbf,function(data){w.postMessage(["Add DBF Attributes",data])}))};return window.Shapefile=Shapefile,void 0}var IN_WORKER=!window.document;IN_WORKER&&(importScripts("/assets/dragdrop/stream.js"),onmessage=function(e){switch(e.data[0]){case"Load":window.shapefile=new Shapefile(e.data[1]);break;case"Add DBF Attributes":window.shapefile.addDBFDataToGeoJSON(e.data[1]),window.shapefile._postMessage()}});var SHAPE_TYPES={0:"Null Shape",1:"Point",3:"PolyLine",5:"Polygon",8:"MultiPoint",11:"PointZ",13:"PolyLineZ",15:"PolygonZ",18:"MultiPointZ",21:"PointM",23:"PolyLineM",25:"PolygonM",28:"MultiPointM",31:"MultiPatch"},Shapefile=function(o,callback){var o="string"==typeof o?{shp:o}:o;this.callback=callback,o.shp.lastModifiedDate?this.handleFile(o):this.handleUri(o)};Shapefile.prototype={constructor:Shapefile,handleUri:function(o){var xhr=new XMLHttpRequest,that=this;if(xhr.open("GET",o.shp,!1),xhr.overrideMimeType("text/plain; charset=x-user-defined"),xhr.send(),200!=xhr.status)throw"Unable to load "+o.shp+" status: "+xhr.status;this.url=o.shp,this.stream=new Gordon.Stream(xhr.responseText),this.readFileHeader(),this.readRecords(),this.formatIntoGeoJson(),o.dbf?this.dbf=IN_WORKER?null:new DBF(o.dbf,function(data){that.addDBFDataToGeoJSON(data),that._postMessage()}):this._postMessage()},handleFile:function(o){if(this.options=o,window.FileReader)var reader=new FileReader;else var reader=new FileReaderSync;reader.onload=function(that){return function(e){that.onFileLoad(e.target.result)}}(this),window.FileReader?reader.readAsBinaryString(o.shp):this.onFileLoad(reader.readAsBinaryString(o.shp))},onFileLoad:function(data){this.stream=new Gordon.Stream(data),this.readFileHeader(),this.readRecords(),this.formatIntoGeoJson(),this.options.dbf?this.dbf=IN_WORKER?null:new DBF(this.options.dbf,function(data){that.addDBFDataToGeoJSON(data),that._postMessage()}):this._postMessage()},_postMessage:function(){var data={header:this.header,records:this.records,dbf:this.dbf,geojson:this.geojson};IN_WORKER?postMessage(data):this.callback&&this.callback(data)},readFileHeader:function(){var s=this.stream,header=this.header={};if(100>s)throw"Invalid Header Length";if(header.fileCode=s.readSI32(!0),header.fileCode!=parseInt(9994))throw"Invalid File Code";s.offset+=20,header.fileLength=2*s.readSI32(!0),header.version=s.readSI32(),header.shapeType=SHAPE_TYPES[s.readSI32()],this._readBounds(header),header.rangeZ={min:s.readDouble(),max:s.readDouble()},header.rangeM={min:s.readDouble(),max:s.readDouble()}},readRecords:function(){for(var record,s=this.stream,records=this.records=[];;){if(record={},record.id=s.readSI32(!0),0==record.id)break;record.length=2*s.readSI32(!0),record.shapeType=SHAPE_TYPES[s.readSI32()],this["_read"+record.shapeType](record),records.push(record)}},_readBounds:function(object){var s=this.stream;return object.bounds={left:s.readDouble(),bottom:s.readDouble(),right:s.readDouble(),top:s.readDouble()},object},_readParts:function(record){var nparts,s=this.stream,parts=[];for(nparts=record.numParts=s.readSI32(),record.numPoints=s.readSI32();nparts--;)parts.push(s.readSI32());return record.parts=parts,record},_readPoint:function(record){var s=this.stream;return record.x=s.readDouble(),record.y=s.readDouble(),record},_readPoints:function(record){for(var s=this.stream,points=[],npoints=record.numPoints||(record.numPoints=s.readSI32());npoints--;)points.push({x:s.readDouble(),y:s.readDouble()});return record.points=points,record},_readMultiPoint:function(record){return this.stream,this._readBounds(record),this._readPoints(record),record},_readPolygon:function(record){return this.stream,this._readBounds(record),this._readParts(record),this._readPoints(record),record},_readPolyLine:function(record){return this._readPolygon(record)},formatIntoGeoJson:function(){var feature,geometry,points,fbounds,gcoords,parts,point,bounds=this.header.bounds,records=this.records,features=[],geojson={};geojson.type="FeatureCollection",geojson.bbox=[bounds.left,bounds.bottom,bounds.right,bounds.top],geojson.features=features;for(var record,r=0;record=records[r];r++){switch(feature={},fbounds=record.bounds,points=record.points,parts=record.parts,feature.type="Feature","Point"!==record.shapeType&&(feature.bbox=[fbounds.left,fbounds.bottom,fbounds.right,fbounds.top]),geometry=feature.geometry={},record.shapeType){case"Point":geometry.type="Point",geometry.coordinates=[record.x,record.y];break;case"MultiPoint":case"PolyLine":geometry.type="PolyLine"==record.shapeType?"LineString":"MultiPoint",gcoords=geometry.coordinates=[];for(var p=0;p<points.length;p++){var point=points[p];gcoords.push([point.x,point.y])}break;case"Polygon":geometry.type="Polygon",gcoords=geometry.coordinates=[];for(var pt=0;pt<parts.length;pt++){for(var point,partIndex=parts[pt],part=[],p=partIndex;p<(parts[pt+1]||points.length);p++)point=points[p],part.push([point.x,point.y]);gcoords.push(part)}}features.push(feature)}this.geojson=geojson,this._addDataAfterLoad&&this.addDBFDataToGeoJSON(this._addDataAfterLoad)},addDBFDataToGeoJSON:function(dbfData){if(!this.geojson)return this._addDataAfterLoad=dbfData;this.dbf=dbfData;for(var features=this.geojson.features,len=features.length,records=dbfData.records;len--;)features[len].properties=records[len]}},window.Shapefile=Shapefile}(self);