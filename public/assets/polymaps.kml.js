!function(){var po=org.polymaps;po.kml=function(){function fetch(url,update){return po.queue.xml(url,function(xml){update(geoJson(xml))})}function geometry(e){return e&&e.tagName in types&&types[e.tagName](e)}function geoJson(xml){for(var features=[],placemarks=xml.getElementsByTagName("Placemark"),i=0;i<placemarks.length;i++){for(var e=placemarks[i],f={id:e.getAttribute("id"),properties:{}},c=e.firstChild;c;c=c.nextSibling){switch(c.tagName){case"name":f.properties.name=c.textContent;continue;case"description":f.properties.description=c.textContent;continue}var g=geometry(c);g&&(f.geometry=g)}f.geometry&&features.push(f)}return{type:"FeatureCollection",features:features}}var kml=po.geoJson(fetch),types={Point:function(e){return{type:"Point",coordinates:e.getElementsByTagName("coordinates")[0].textContent.split(",").map(Number)}},LineString:function(e){return{type:"LineString",coordinates:e.getElementsByTagName("coordinates")[0].textContent.trim().split(/\s+/).map(function(a){return a.split(",").slice(0,2).map(Number)})}},Polygon:function(e){return{type:"Polygon",coordinates:e.getElementsByTagName("coordinates")[0].textContent.trim().split(/\s+/).map(function(a){return a.split(",").slice(0,2).map(Number)})}},MultiGeometry:function(e){for(var coordinates=[],outerBoundaries=e.getElementsByTagName("outerBoundaryIs"),i=outerBoundaries.length-1;i>=0;i--){var poly=outerBoundaries[i].getElementsByTagName("coordinates")[0].textContent.trim().split(/\s+/).map(function(a){return a.split(",").slice(0,2).map(Number)});coordinates.push([poly])}return{type:"MultiPolygon",coordinates:coordinates}}};return kml}}();