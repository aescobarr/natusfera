(function(){
/**
 * iNaturalist map object
 * Copyright (c) iNaturalist, 2007-2008
 * 
 * @created: 2008-01-01
 * @updated: 2008-04-12
 * @author: n8agrin
 * @author: kueda
 */

// requires GoogleMap classes
if (typeof(google) == 'undefined' || typeof(google.maps) == 'undefined') throw "The Google Maps libraries must be loaded to use the iNaturalist Map extensions.";

var deselectText = function() {
  if (window.getSelection) {
    if (window.getSelection().empty) {  // Chrome
      window.getSelection().empty();
    } else if (window.getSelection().removeAllRanges) {  // Firefox
      window.getSelection().removeAllRanges();
    }
  } else if (document.selection) {  // IE
    document.selection.empty();
  }
};

// extend parts of the Google Marker class
google.maps.Marker.prototype.observation_id = null;

// A map consists of the map itself, plus methods on how to add Observations
// javascript objects to the map and handle the updating of those objects
// when an Observation is moved or editted.

// storage for marker objects indexed by their corresponding
// observation_id's
google.maps.Map.prototype.observations = {};
google.maps.Map.prototype.places = {};
    
// used when creating observations from the map
// TODO: make this more like a stack to help with handling multiple
// unsaved markers
google.maps.Map.prototype.lastUnsavedMarker = null;


// general purpose infoWindow
// stores a global scope reference to an infoWindow
google.maps.Map.prototype.infoWindow = null;


google.maps.Map.prototype.createMarker = function(lat, lng, options) {
  options = options || {}
  options.position = new google.maps.LatLng(lat, lng)
  return new google.maps.Marker(options);
};
  
// remove a single marker
google.maps.Map.prototype.removeMarker = function(marker) {
  // gracefully clear the listeners out of memory
  google.maps.event.clearInstanceListeners(marker);
  
  // remove the marker from the map
  this.removeOverlay(marker);
};
  
google.maps.Map.prototype.addNewCenteredMarker = function(options) {
  return this.addNewUnsavedMarker(this.getCenter().lat(),
                                  this.getCenter().lng(),
                                  options);
};
  
google.maps.Map.prototype.addNewUnsavedMarker = function(lat, lng, options) {
  this.removeLastUnsavedMarker();
  this.lastUnsavedMarker = this.createMarker(lat, lng, options);
  this.lastUnsavedMarker.setMap(this);
  return this.lastUnsavedMarker;
};
  
// Call this to remove the marker object from the lastUnsavedMarker value in the
// iNaturalist.Map object.  This is usually used when canceling input into
// a form, or when the lastUnsavedMarker object needs to be cleared out.
google.maps.Map.prototype.removeLastUnsavedMarker = function() {
  if (this.lastUnsavedMarker) {
    this.removeMarker(this.lastUnsavedMarker);
    this.lastUnsavedMarker = null;
    return true;
  }
  return false;
};
  
// addObservation adds the observation to the map and tacks a marker
// obejct onto the Observation object.  This assumes the observation has
// already been saved.  Use addUnsavedMarker above if you need to add
// a single marker to the map in an unsaved state.
google.maps.Map.prototype.addObservation = function(observation, options) {
  options = options || {}
  
  // Use private coords if they're there.  It's up to the json provider to 
  // filter this out.
  var lat = observation.private_latitude || observation.latitude,
      lon = observation.private_longitude || observation.longitude
  
  // Can't add an obs w/o coordinates
  if (!lat || !lon) return false;

  if (!options.icon) {
    options.icon = iNaturalist.Map.createObservationIcon({observation: observation});
  }
  
  var marker = this.createMarker(lat, lon, options);
  
  // store the marker for later use, or for easy removing
  this.observations[observation.id] = marker;
  
  // build a generic marker infowwindow
  if (typeof(options.clickable) == 'undefined' || options.clickable != false) {
    marker.message = this.buildObservationInfoWindow(observation);
    
    // add a click handler to the marker so that one can keep track of it.
    google.maps.event.addListener(marker, 'click', this.openInfoWindow)
  };
  
  var bounds = this.getObservationBounds();
  bounds.extend(new google.maps.LatLng(lat, lon));
  this.setObservationBounds(bounds);
  
  // add the marker to the map
  marker.setMap(this);
  observation.marker = marker;
  
  if (options.showAccuracy && 
      (observation.coordinates_obscured || (observation.positional_accuracy && observation.positional_accuracy > 0))) {
    var accuracy = parseInt(observation.positional_accuracy) || 0
    if (observation.coordinates_obscured) {
      accuracy += 10000
    }
    if (accuracy == 0) return
    var iconicTaxonName = observation.iconic_taxon_name
    if (!iconicTaxonName && observation.iconic_taxon) iconicTaxonName = observation.iconic_taxon.name
    var color = iconicTaxonName ? iNaturalist.Map.ICONIC_TAXON_COLORS[iconicTaxonName] : '#333333'
    var circle = new google.maps.Circle({
      strokeColor: color,
      strokeOpacity: 0.8,
      strokeWeight: 2,
      fillColor: color,
      fillOpacity: 0.35,
      map: this,
      center: marker.getPosition(),
      radius: accuracy
    })
    observation._circle = circle
    google.maps.event.addListener(this, 'zoom_changed', function() {
      var mapBounds = this.getBounds(),
          circleBounds = circle.getBounds()
      if (circleBounds.contains(mapBounds.getNorthEast()) && circleBounds.contains(mapBounds.getSouthWest())) {
        circle.setVisible(false)
      } else {
        circle.setVisible(true)
      }
    })
  }
  
  // return the observation for futher use
  return observation;
};
  
google.maps.Map.prototype.removeObservation = function(observation) {
  this.removeMarker(this.observations[observation.id]);
  if (this.observations[observation.id]) {
    this.observations[observation.id].setMap(null)
  }
  delete this.observations[observation.id];
};
  
google.maps.Map.prototype.addObservations = function(observations, options) {
  var map = this;
  $.each(observations, function() {
    var success = map.addObservation(this, options);
  });
};
  
// remove many observations from a list of observations
google.maps.Map.prototype.removeObservations = function(observations) {
  var map = this;
  if (typeof(observations) == "undefined") {
    $.each(map.observations, function(k,v) {
      map.removeMarker(v)
      v.setMap(null)
      delete map.observations[k]
      delete map.observationBounds
    });
  } else {
    $.each(observations, function() {
      map.removeObservation(this);
    });
  }
};

google.maps.Map.prototype.getObservationBounds = function() {
  if (!this.observationBounds) {
    this.observationBounds = new google.maps.LatLngBounds()
  }
  return this.observationBounds
};

google.maps.Map.prototype.setObservationBounds = function(bounds) {
  this.observationBounds = bounds;
};

google.maps.Map.prototype.zoomToObservations = function() {
  this.fitBounds(this.getObservationBounds())
};

google.maps.Map.prototype.addPlaces = function(places) {
  for (var i = places.length - 1; i >= 0; i--){
    this.addPlace(places[i])
  }
}
google.maps.Map.prototype.addPlace = function(place, options) {
  if (typeof(options) == 'undefined') { var options = {} };
  
  if (typeof(options.icon) == 'undefined') {
    options.icon = iNaturalist.Map.createPlaceIcon();
  };
  var marker = this.createMarker(place.latitude, place.longitude, options);
  
  this.places[place.id] = marker;
  
  // If this is the first, set the bounds to the extent of the place.
  var placesLength = 0;
  for(var key in this.places) placesLength += 1;
  
  if (placesLength == 1 && place.swlat != null && place.swlat != '') {
    var bounds = new google.maps.LatLngBounds(
      new google.maps.LatLng(place.swlat, place.swlng), 
      new google.maps.LatLng(place.nelat, place.nelng));
  }
  // Otherwise just extend the bounds
  else {
    var bounds = this.getPlaceBounds()
    if (place.swlat) {
      bounds.extend(new google.maps.LatLng(place.swlat, place.swlng))
      bounds.extend(new google.maps.LatLng(place.nelat, place.nelng))
    } else {
      bounds.extend(new google.maps.LatLng(place.latitude, place.longitude))
    }
  }
  this.setPlaceBounds(bounds);
  
  // add the marker to the map
  marker.setMap(this);
  place.marker = marker;
  
  // return the place for futher use
  return place;
}

// Zooms to place boundaries, adds kml if available
google.maps.Map.prototype.setPlace = function(place, options) {
  options = options || {}
  if (place.swlat) {
    var bounds = new google.maps.LatLngBounds(
      new google.maps.LatLng(place.swlat, place.swlng),
      new google.maps.LatLng(place.nelat, place.nelng)
    )
    this.fitBounds(bounds)
  } else {
    this.setCenter(new google.maps.LatLng(place.latitude, place.longitude));
  }
}
// 
// google.maps.Map.prototype.addPlaces = function(places, options) {
//   var map = this;
//   $.each(places, function() {
//     var success = map.addPlace(this, options);
//   });
// }
google.maps.Map.prototype.removePlace = function(place) {
  this.removeMarker(this.places[place.id]);
  delete this.places[place.id];
}
google.maps.Map.prototype.removePlaces = function(places) {
  var map = this;
  if (typeof(places) == 'undefined') {
    $.each(map.places, function() {
      map.removeMarker(this);
      delete this;
    });
  } else {
    $.each(places, function() {
      map.removePlace(this);
    });
  }
  this.placeBounds = new google.maps.LatLngBounds();
}
google.maps.Map.prototype.zoomToPlaces = function() {
  this.fitBounds(this.getPlaceBounds())
}
google.maps.Map.prototype.getPlaceBounds = function() {
  if (typeof(this.placeBounds) == 'undefined') {
    this.placeBounds = new google.maps.LatLngBounds();
  };
  return this.placeBounds;
}
google.maps.Map.prototype.setPlaceBounds = function(bounds) {
  this.placeBounds = bounds;
}
  
google.maps.Map.prototype.openInfoWindow = function(e) {
  iNaturalist.Map.infowWindow = iNaturalist.Map.infowWindow || new google.maps.InfoWindow()
  iNaturalist.Map.infowWindow.setContent(this.message)
  iNaturalist.Map.infowWindow.open(this.map, this)
};
  
google.maps.Map.prototype.buildObservationInfoWindow = function(observation) {  
  // First see if we can find an observation component for this observation
  var existing = document.getElementById('observation-'+observation.id);
  if (typeof(existing) != 'undefined' && existing != null) {
    var infowinobs = $(existing).clone().get(0);
    $(infowinobs).find('.details').show();
    var wrapper = $('<div class="compact mini infowindow observations"></div>').append(infowinobs);
    return $(wrapper).get(0);
  };
  
  var wrapper = $('<div class="observation"></div>');
  var photoURL
  if (typeof(observation.image_url) != 'undefined' && observation.image_url != null) {
    photoURL = observation.image_url
  } else if (typeof(observation.obs_image_url) != 'undefined' && observation.obs_image_url != null) {
    photoURL = observation.obs_image_url
  } else if (typeof(observation.photos) != 'undefined' && observation.photos.length > 0) {
    photoURL = observation.photos[0].square_url
  }
  if (photoURL) {
    wrapper.append(
      $('<img width="75" height="75"></img>').attr('src', photoURL).addClass('left')
    );
  }
  
  wrapper.append(
    $('<div class="readable attribute inlineblock"></div>').append(
      $('<a href="/observations/'+observation.id+'"></a>').append(
        observation.species_guess
      )
    )
  );
  if (observation.user) {
    wrapper.append(
      ', by ',
      $('<a href="/people/'+observation.user.login+'"></a>').append(
        observation.user.login
      )
    )
  }else if(typeof(observation.identifications) != 'undefined' && observation.identifications.length > 0){
    if( typeof(observation.identifications[0].user) != 'undefined' ){
      wrapper.append(
        ', by ',
        $('<a href="/people/'+observation.identifications[0].user.login+'"></a>').append(
          observation.identifications[0].user.login
        )
      )
    }
  }
 
  if (typeof(observation.short_description) != 'undefined' && observation.short_description != null) {
    wrapper.append($('<div class="description"></div>').append(observation.short_description));
  } else {
    wrapper.append($('<div class="description"></div>').append(observation.description));
  }
  
  wrapper = $('<div class="compact observations mini infowindow"></div>').append(wrapper);
  
  return wrapper.get(0);
};

// All obs layer functions.  The mouseover effect was adapted from 
// http://www.usnaviguide.com/ws-2008-02/demotilecookies.htm
google.maps.Map.prototype.showAllObsOverlay = function() {
  if (typeof(this._allObsOverlay) == 'undefined') {
    var myCopyright = new google.maps.CopyrightCollection();
    var allObsLyr = new ObservationsTileLayer(myCopyright, 0, 18, {
      isPNG: true,
      tileUrlTemplate: this._observationsTileServer + '/{Z}/{X}/{Y}.png'
    });
    this._allObsOverlay = new google.maps.TileLayerOverlay(allObsLyr);
    
    // Create an invisible map marker to move over raster pts
    var baseIcon = new google.maps.MarkerImage();
    baseIcon.size = new google.maps.Size(20,20);
    baseIcon.anchor = new google.maps.Point(10,10);
    // baseIcon.shadow = null;
    // baseIcon.image = null;
    this._allObsMarker = new google.maps.Marker(new google.maps.LatLng(35,-90), {icon:baseIcon});
    this._allObsMarker.setVisible(false);
    google.maps.event.addListener(this._allObsMarker, 'click', function() {
      var observation = this._observation;
      var maxContentDiv = $('<div class="observations mini maxinfowindow"></div>').append(
        $('<div class="loading status">' + I18n.t('loading') + '</div>')
      ).get(0);
      this.openInfoWindowHtml(
        map.buildObservationInfoWindow(observation),
        {maxContent: maxContentDiv, maxTitle: 'More about this observation'}
      );
      var infoWindow = map.getInfoWindow();
      google.maps.event.addListener(infoWindow, "maximizeclick", function() {
        google.maps.DownloadUrl("/observations/"+observation.id+"?partial=observation", function(data) {
          maxContentDiv.innerHTML = data;
          $(maxContentDiv).find('.details').show();
          if (typeof($.jqm) != 'undefined') {
            $('#modal_image_box').jqmAddTrigger('.maxinfowindow a.modal_image_link');
          }
        });
      });
    });
    this._allObsMarker.map = map
  };
  
  this._allObsOverlay.map = map
  
  // Listen to all mouse mvmnts over the map to see if they pass near obs
  this._mouseMoveListenerHandle = google.maps.event.addListener(map, 'mousemove', 
    this._mouseMoveListener);
}

google.maps.Map.prototype.hideAllObsOverlay = function() {
  if (typeof(this._allObsOverlay) != 'undefined') {
    this.removeOverlay(this._allObsOverlay);
    google.maps.event.removeListener(this._mouseMoveListenerHandle);
  };
}

google.maps.Map.prototype._mouseMoveListener = function(e) {
  var mouseLatLng = e.latLng
  var zoom = this.getZoom();
  var mousePx = e.pixel
  var tileKey = iNaturalist.Map.obsTilePointsURL(Math.floor(mousePx.x / 256), 
    Math.floor(mousePx.y / 256), zoom);
  
  window.tilePoints = window.tilePoints || {}
  if (typeof(window.tilePoints[tileKey]) == 'undefined' || window.tilePoints[tileKey].length == 0) return;
  var observations = window.tilePoints[tileKey];
  
  for (var i = observations.length - 1; i >= 0; i--) {
    var obsPx = G_NORMAL_MAP.getProjection().fromLatLngToPixel(
      new google.maps.LatLng(observations[i].latitude, observations[i].longitude), zoom);
    var distance = Math.sqrt(
      Math.pow((mousePx.x - obsPx.x), 2) +
      Math.pow((mousePx.y - obsPx.y), 2)
    );
    
    if (distance < 10) { // if within 10px...
      this._allObsMarker.setLatLng(
        new google.maps.LatLng(observations[i].latitude, observations[i].longitude));
      this._allObsMarker._observation = observations[i];
      this._allObsMarker.show();
      return;
    }
    this._allObsMarker._observation = null;
    this._allObsMarker.setVisible(false);
  };
}

if (typeof iNaturalist === 'undefined') this.iNaturalist = {};

if (typeof iNaturalist.Map === 'undefined') this.iNaturalist.Map = {};

// static functions
iNaturalist.Map.createMap = function(options) {
  options = options || {}
  options = $.extend({}, {
    div: 'map',
    center: new google.maps.LatLng(options.lat || 0, options.lng || 0),
    zoom: 1,
    minZoom: 1,
    mapTypeId: google.maps.MapTypeId.TERRAIN,
    streetViewControl: false,
    observationsTileServer: 'http://localhost:8000'
  }, options);
  
  var map;
  
  if (typeof options.div == 'string') {
    map = new google.maps.Map(document.getElementById(options.div), options);
  }
  else {
    map = new google.maps.Map(options.div, options);
  }
  map.controls[google.maps.ControlPosition.TOP_RIGHT].push(new iNaturalist.FullScreenControl(map));
  map.controls[google.maps.ControlPosition.TOP_RIGHT].push(new iNaturalist.DragDropShapeControl(map));
  map._observationsTileServer = options.observationsTileServer
  // map.overlayMapTypes.insertAt(0, iNaturalist.Map.buildObservationsMapType(map))

  if (options.bounds) {
    if (typeof(options.bounds.getCenter) == 'function') {
      map.setBounds(options.bounds)
    } else {
      var bounds = new google.maps.LatLngBounds(
        new google.maps.LatLng(options.bounds.swlat, options.bounds.swlng),
        new google.maps.LatLng(options.bounds.nelat, options.bounds.nelng)
      )
      map.fitBounds(bounds)
    }
  } 
  return map;
}

// The following code should be abstracted out a bit more
iNaturalist.Map.createPlaceIcon = function(options) {
  var options = options || {}
  var iconPath = "<%= image_path('mapMarkers/mm_34_stemless_') %>";
  iconPath += options.color ? options.color : "DeepPink"
  if (options.character) { iconPath += ('_' + options.character); }
  iconPath += '.png';
  var place = new google.maps.MarkerImage(iconPath);
  place.size = new google.maps.Size(20,20);
  place.anchor = new google.maps.Point(10,10);
  return place;
};

iNaturalist.Map.createObservationIcon = function(options) {
  if (typeof(options) == 'undefined') { var options = {} };
  
  var iconPath;
  
  // Choose the right settings for the observation's iconic taxon
  if (options.observation) {
    var iconSet = options.observation.coordinates_obscured ? 'STEMLESS_ICONS' : 'ICONS'
    var iconicTaxonIconsSet = options.observation.coordinates_obscured ? 'STEMLESS_ICONIC_TAXON_ICONS' : 'ICONIC_TAXON_ICONS'
    var iconicTaxonName = options.observation.iconic_taxon_name
    if (!iconicTaxonName && options.observation.iconic_taxon) iconicTaxonName = options.observation.iconic_taxon.name
    if (iconicTaxonName) {
      iconPath = iNaturalist.Map[iconicTaxonIconsSet][iconicTaxonName];
    } else {
      iconPath = iNaturalist.Map[iconSet]['unknown34'];
    }

    return iconPath
  }
  
  iconPath = "<%= image_path('mapMarkers/mm_34_') %>"
  iconPath += options.stemless ? "stemless_" : ""
  iconPath += options.color || "HotPink"
  iconPath += options.character ? ('_'+options.character) : ""
  iconPath += '.png'
  return iconPath
};

iNaturalist.Map.obsTilePointsURL = function(x, y, zoom) {
  return '/observations/tile_points/' + zoom + '/' + x + '/' + y + '.json';
}

// Create a custom TileLayer class that will lookup observations json for 
// each tile
iNaturalist.Map.buildObservationsMapType = function(map) {
  var tileUrlTemplate = map._observationsTileServer ? map._observationsTileServer+'/{Z}/{X}/{Y}.png' : 'http://localhost:8000/{Z}/{X}/{Y}.png'
  
  // // Create an invisible map marker to move over raster pts
  // var baseIcon = new google.maps.MarkerImage();
  // baseIcon.size = new google.maps.Size(20,20);
  // baseIcon.anchor = new google.maps.Point(10,10);
  // map._allObsMarker = new google.maps.Marker(new google.maps.LatLng(35,-90), {icon:baseIcon});
  // map._allObsMarker.setVisible(false);
  // google.maps.event.addListener(map._allObsMarker, 'click', function() {
  //   var observation = map._observation;
  //   var maxContentDiv = $('<div class="observations mini maxinfowindow"></div>').append(
  //     $('<div class="loading status">Loading...</div>')
  //   ).get(0);
  //   map.openInfoWindowHtml(
  //     map.buildObservationInfoWindow(observation),
  //     {maxContent: maxContentDiv, maxTitle: 'More about map observation'}
  //   );
  //   var infoWindow = map.getInfoWindow();
  // });
  // map._allObsMarker.map = map
  // 
  // // Listen to all mouse mvmnts over the map to see if they pass near obs
  // map._mouseMoveListenerHandle = google.maps.event.addListener(map, 'mousemove', map._mouseMoveListener);
  
  return new google.maps.ImageMapType({
    getTileUrl: function(tilePoint, zoom) {
      // var jsonURL = iNaturalist.Map.obsTilePointsURL(tilePoint.x, tilePoint.y, zoom);
      // if (typeof(window.tilePoints) == 'undefined') window.tilePoints = {};
      // 
      // // if we already have data for this tile, skip the AJAX
      // if (typeof(window.tilePoints[jsonURL]) == 'undefined') {
      //   $.getJSON(jsonURL, function(data, textStatus) {
      //     window.tilePoints[jsonURL] = data;
      //   });
      // }
      // 
      // Return the actual tile URL
      var tileUrl = tileUrlTemplate
      tileUrl = tileUrl.replace('{Z}', zoom).replace('{X}', tilePoint.x).replace('{Y}', tilePoint.y);
      return tileUrl;
    },
    tileSize: new google.maps.Size(256, 256),
    isPng: true,
    name: "Observations"
  })
}

// Haversine distance calc, adapted from http://www.movable-type.co.uk/scripts/latlong.html
iNaturalist.Map.distanceInMeters = function(lat1, lon1, lat2, lon2) {
  var earthRadius = 6370997, // m 
      degreesPerRadian = 57.2958,
      dLat = (lat2-lat1) / degreesPerRadian,
      dLon = (lon2-lon1) / degreesPerRadian,
      lat1 = lat1 / degreesPerRadian,
      lat2 = lat2 / degreesPerRadian

  var a = Math.sin(dLat/2) * Math.sin(dLat/2) +
          Math.sin(dLon/2) * Math.sin(dLon/2) * Math.cos(lat1) * Math.cos(lat2); 
  var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a)); 
  var d = earthRadius * c;
  
  return d
}

iNaturalist.DragDropShapeControl = function(map) {
  var controlDiv = $(document.createElement('div'));
  controlDiv[0].style.zIndex = '1';
  controlDiv[0].style.padding = '5px';

  var controlUI = $(document.createElement('div'));
  $(controlUI).addClass('ddUI');
  $(controlUI).addClass('gmapv3control');
  controlUI[0].style.textAlign = 'center';
  $(controlDiv).append(controlUI);

  // Set CSS for the control interior
  var controlText = $(document.createElement('div'));
  $(controlText).addClass('ddText');
  $(controlText).addClass('gm-style');
  controlText.prop('innerHTML', 'SHP!');
  $(controlUI).append(controlText);

  zoomToShape =function(map) {
    var bounds = new google.maps.LatLngBounds();
    map.data.forEach(function(feature) {
      processPoints(feature.getGeometry(), bounds.extend, bounds);
    });
    map.fitBounds(bounds);
  }

  processPoints = function(geometry, callback, thisArg) {
    if (geometry instanceof google.maps.LatLng) {
      callback.call(thisArg, geometry);
    } else if (geometry instanceof google.maps.Data.Point) {
      callback.call(thisArg, geometry.get());
    } else {
      geometry.getArray().forEach(function(g) {
        processPoints(g, callback, thisArg);
      });
    }
  }

  loadGeoJsonString = function(geoString) {
    var geojson = JSON.parse(geoString);
    map.data.addGeoJson(geojson);
    zoomToShape(map);
  }

  handleDragLeave = function(e) {    
    e.stopPropagation();
    e.preventDefault();
    return false;
  }

  handleDragOver = function(e) {
    e.stopPropagation();
    e.preventDefault();
    return false;
  }

  handleDrop = function(e){
    e.preventDefault();
    e.stopPropagation();

    var files = e.dataTransfer.files;
    if (files.length) {    
    // process file(s) being dropped
    // grab the file data from each file
    var shape, db = null;
    for (var i = 0, file; file = files[i]; i++) {
      if(file.name.indexOf('dbf') > -1){
        db = file;
      }
      if(file.name.indexOf('shp') > -1){
        shape = file;
      }
    }
    if(db && shape){
      var shapefile = new Shapefile({
        shp: shape,
        dbf: db
      },function(data){
          var jsonString = JSON.stringify(data.geojson);
          loadGeoJsonString(jsonString);
        }
      );
    }else if(!db && shape){
      var shapefile = new Shapefile({
        shp: shape
      },function(data){
          var jsonString = JSON.stringify(data.geojson);
          loadGeoJsonString(jsonString);
        }
      );
    }
  } else {
    // process non-file (e.g. text or html) content being dropped
    // grab the plain text version of the data
    var plainText = e.dataTransfer.getData('text/plain');
    if (plainText) {
      loadGeoJsonString(plainText);
    }
  }
  return false;
};

  controlDiv[0].addEventListener('dragover', handleDragOver, false);
  controlDiv[0].addEventListener('drop', handleDrop, false); 
  controlDiv[0].addEventListener('dragleave', handleDragLeave, false); 
 
  return controlDiv[0];
}

iNaturalist.FullScreenControl = function(map) {
  var controlDiv = document.createElement('DIV'),
      enter = '<span class="ui-icon ui-icon-extlink">Full screen</span>',
      exit = '<span class="ui-icon ui-icon-arrow-1-sw inlineblock"></span> ' + I18n.t('exit_full_screen')
  controlDiv.style.padding = '5px';
  var controlUI = $('<div></div>').html(enter).addClass('gmapv3control')
  controlDiv.appendChild(controlUI.get(0))

  var exitFullScreen = function() {
    var oldCenter = map.getCenter()
    $(this).html(enter).css('font-weight', 'normal')
    $(map.getDiv()).removeClass('fullscreen')
    google.maps.event.trigger(map, 'resize')
    map.setCenter(oldCenter)
  }

  window.fullscreenEscapeHandler = function(e) {
    if(e.keyCode === 27) {
      controlUI.click()
    }
    $(document).unbind('keyup', window.fullscreenEscapeHandler)
  }

  var enterFullScreen = function() {
    var oldCenter = map.getCenter()
    $(this).html(exit).css('font-weight', 'bold')
    $(map.getDiv()).addClass('fullscreen')
    google.maps.event.trigger(map, 'resize')
    map.setCenter(oldCenter)
    $(document).bind('keyup', window.fullscreenEscapeHandler)
  }
  
  controlUI.toggle(enterFullScreen, exitFullScreen)
  return controlDiv;
}

iNaturalist.OverlayControl = function(map, options) {
  options = options || {}
  var controlDiv = options.div || document.createElement('DIV')
  controlDiv.style.padding = '5px';
  var controlUI = $('<div>' + I18n.t('taxon_map.overlays') + '</div>').addClass('gmapv3control overlaycontrol')
  var controlUI = $('<div><span class="ui-icon inat-icon ui-icon-layers">'+I18n.t('taxon_map.overlays')+'</span></div>').addClass('gmapv3control overlaycontrol')
  var ul = $('<ul></ul>').addClass("inat-overlay").hide()
  controlUI.append(ul)
  controlUI.hover(function() {
    $(this).addClass('open')
    $('ul', this).show()
    $(this).parent().css('z-index', 1)
  }, function() {
    $(this).removeClass('open')
    $('ul', this).hide()
    $(this).parent().css('z-index', 0)
  })
  controlDiv.appendChild(controlUI.get(0))
  this.div = controlDiv
  this.map = map
  if (map.overlays) {
    for (var i=0; i < map.overlays.length; i++) {
      this.addOverlay(map.overlays[i])
    }
  }
  return this;
}

// Given an array of wax.g map layers (overlayMapTypes), add a single
// checkbox to the custom iNaturalist Overlays map control. That single
// checkbox can have custom title and description, and will toggle everything
// in `layers` at the same time. If the overlay was not previously displayed
// on the map, it will be added to the top-right corner of the map.
iNaturalist.OverlayControl.prototype.addWindshaftOverlayControl = function( layers, options ) {
  if( ! _.isArray( layers ) || layers.length === 0 ) { return; }
  var map = this.map,
      ul = $("ul", this.div),
      id = "layer_" + layers[0].layerID,
      title = options.title || "Layer",
      description = options.description,
      checkbox = $("<input type='checkbox'/>"),
      label = $("<label/>").attr("for", id).html(title),
      li = $("<li/>");
  checkbox
    .attr("id", id)
    .attr("name", title)
    .attr("checked", ! options.disabled);    
  li.append( checkbox, label );
  checkbox.click( function( ) {
    var checked = this.checked;
    _.each( layers, function( layerData ) {
      map.overlayMapTypes.setAt( layerData.layerID - 1, checked ? layerData.layer : null);
    });
  })
  if(options.disabled){
    _.each( layers, function( layerData ) {
      map.overlayMapTypes.setAt( layerData.layerID - 1, null);
    });
  }
  if( description ) {
    li.append($("<div/>").addClass("small meta").html( description ));
  }
  ul.append( li );
  if( ! map._overlayControlDisplayed ) {
    map.controls[google.maps.ControlPosition.TOP_RIGHT].push(map._overlayControl.div);
    map._overlayControlDisplayed = true;
  }  
};

iNaturalist.OverlayControl.prototype.addOverlay = function(lyr) {
  var map = this.map,
      ul = $('ul', this.div)
      name = lyr.name,
      id = lyr.id || name,
      overlay = lyr.overlay,
      checkbox = $('<input type="checkbox"></input>'),
      label = $('<label></label>').attr('for', id).html(name),
      li = $('<li></li>')
  checkbox
    .attr('id', id)
    .attr('name', name)
    .attr('checked', overlay.getMap())
  checkbox.click(function() {
    var name = $(this).attr('name'),
        overlay = map.getOverlay(name).overlay
    overlay.setMap(overlay.getMap() ? null : map)
  })
  li.append(checkbox, label)
  if (lyr.description) {
    li.append($('<div></div>').addClass('small meta').html(lyr.description))
  }
  ul.append(li)
}

google.maps.Map.prototype.addOverlay = function(name, overlay, options) {
  options = options || {}
  this.overlays = this.overlays || []
  var overlayOpts = {
    name: name,
    overlay: overlay,
    id: options.id,
    description: options.description
  }
  this.overlays.push(overlayOpts)
  if (overlay.setMap && !options.hidden) { overlay.setMap(this) }
  if (this._overlayControl) {this._overlayControl.addOverlay(overlayOpts)};
}
google.maps.Map.prototype.removeOverlay = function(name) {
  if (!this.overlays) { return }
  for (var i=0; i < this.overlays.length; i++) {
    if (this.overlays[i].name == name) { 
      this.overlays[i].overlay.setMap(null)
      this.overlays.splice(i)
    }
  }
}
google.maps.Map.prototype.getOverlay = function(name) {
  if (!this.overlays) { return }
  for (var i=0; i < this.overlays.length; i++) {
    if (this.overlays[i].name == name) { return this.overlays[i] }
  }
}

google.maps.Map.prototype.addPlaceLayer = function( options ) {
  // prevent the tilt feature, which cannot overlay tiles at higher zooms
  this.setTilt(0);
  var options = options || { },
      tiles_url = options.tiles_url || <%= CONFIG.tile_servers.windshaft.inspect %>,
      placeTileUrl = tiles_url + "/places/" + options.place.id + "/{z}/{x}/{y}.png";
  var tilejson = { tiles: [ placeTileUrl ] };
  return this.addLayerAndControl( tilejson, _.extend(options, {
    description: options.place.name
  }));
  return this.addLayerAndControl( tilejson );
}

google.maps.Map.prototype.addTaxonRangeLayer = function( options ) {
  // prevent the tilt feature, which cannot overlay tiles at higher zooms
  this.setTilt(0);
  var options = options || { },
      tiles_url = options.tiles_url || <%= CONFIG.tile_servers.windshaft.inspect %>,
      rangeTileUrl = tiles_url + "/taxon_ranges/" + options.taxon.id + "/{z}/{x}/{y}.png";
  var tilejson = { tiles: [ rangeTileUrl ] };
  return this.addLayerAndControl( tilejson, options );
};

// Convenience method that likely isn't called outside this file.
// Will add a layer and send that layer's data to addWindshaftOverlayControl
// to add a checkbox toggle for this new layer
google.maps.Map.prototype.addLayerAndControl = function( tilejson, options ) {
  options = options || { }
  var layer = new wax.g.connector( tilejson );
  var layerID = this.overlayMapTypes.push( layer );
  if( this._overlayControl ) {
    this._overlayControl.addWindshaftOverlayControl(
      [ { layer: layer, layerID: layerID } ], options );
  }
  return layerID;
};

google.maps.Map.prototype.addiNatObservationsLayer = function(options) {
  this.setTilt(0);
  var options = options || { },      
      iNatObsTileUrl = "http://tiles.inaturalist.org/points/{z}/{x}/{y}.png";
  var tilejson = { tiles: [ iNatObsTileUrl ] };
  return this.addLayerAndControl( tilejson, options );
  // prevent the tilt feature, which cannot overlay tiles at higher zooms
  /*this.setTilt( 0 );  
  var options = options || { },
      iNatObsTileUrl = "http://tiles.inaturalist.org/points/{z}/{x}/{y}.png";
  //interact_url: 'http://www.inaturalist.org'  
  // these are the parameters that will be sent to the windshaft API
  var pointParamKeys = [ 'taxon_id', 'user_id', 'place_id',
    'project_id', 'ttl', 'color', 'opacity', 'border_opacity','observation_id' ];      
  var pointParams = { };
  _.each( options, function( value, key ) {    
    pointKey = key.replace("point_", "");    
    if( _.contains( pointParamKeys, pointKey ) ) {
      pointParams[ pointKey ] = value;
    }
  });
  // build the proper paramater string for HTTP GET  
  if( pointParams ) {
    iNatObsTileUrl += "?" + $.param( pointParams );
  }
  // add a layer to the map for the grid  
  pointLayer = this.addTileLayer( iNatObsTileUrl, {
    interactivity: 'id,taxon_id,species_guess,latitude,longitude,positional_accuracy,captive,quality_grade,iconic_taxon_id',
    disabled: options.disabled,
    interact_url : 'http://www.inaturalist.org'
  })
  // add a toggle for this layer to the overlay control, if it exists
  if( this._overlayControl ) {
    this._overlayControl.addWindshaftOverlayControl(
      [ pointLayer ], options
    );
  }*/
};

google.maps.Map.prototype.addObservationsLayer = function(options) {
  // prevent the tilt feature, which cannot overlay tiles at higher zooms
  this.setTilt( 0 );
  // if there is a global color, so no need for separate grid or point colors
  if( options.color ) {
    options.grid_color = null;
    options.point_color = null;
  }
  var options = options || { },
      tiles_url = options.tiles_url || <%= CONFIG.tile_servers.windshaft.inspect %>,
      gridTileUrl = tiles_url + "/observations/grid/{z}/{x}/{y}.png",
      pointTileUrl = tiles_url + "/observations/points/{z}/{x}/{y}.png",
      gridmaxzoom = options.gridmaxzoom || 9;
  // these are the parameters that will be sent to the windshaft API
  var gridParamKeys = [ 'taxon_id', 'user_id', 'place_id',
    'project_id', 'ttl', 'color', 'opacity', 'border_opacity' ];
  var pointParamKeys = gridParamKeys.concat([ 'observation_id' ]);
  // filter the incoming parameters
  var gridParams = { };
  var pointParams = { };
  _.each( options, function( value, key ) {
    gridKey = key.replace("grid_", "");
    pointKey = key.replace("point_", "");
    if( _.contains( gridParamKeys, gridKey ) ) {
      gridParams[ gridKey ] = value;
    }
    if( _.contains( pointParamKeys, pointKey ) ) {
      pointParams[ pointKey ] = value;
    }
  });
  // build the proper paramater string for HTTP GET
  if( gridParams ) {
    gridTileUrl += "?" + $.param( gridParams );
  }
  if( pointParams ) {
    pointTileUrl += "?" + $.param( pointParams );
  }
  // add a layer to the map for the grid
  gridLayer = this.addTileLayer( gridTileUrl, {
    maxzoom: gridmaxzoom,
    interactivity: false,
    disabled: options.disabled
  });
  pointLayer = this.addTileLayer( pointTileUrl, {
    interactivity: options.interactivity === false ? false :
      'id,taxon_id,species_guess,latitude,longitude,positional_accuracy,captive,quality_grade,iconic_taxon_id',
    minzoom: gridmaxzoom + 1,
    gridminzoom: gridmaxzoom + 1,
    disabled: options.disabled
  })
  // add a toggle for this layer to the overlay control, if it exists
  if( this._overlayControl ) {
    this._overlayControl.addWindshaftOverlayControl(
      [ gridLayer, pointLayer ], options
    );
  }
};

google.maps.Map.prototype.getInfoWindow = function() {
  if (!this.infoWindow) {
    this.infoWindow = new google.maps.InfoWindow({
       content: $('<div class="loading status">'+I18n.t('loading')+'</div>').get(0),
       position: new google.maps.LatLng(0,0)
    })
  }
  return this.infoWindow
}

google.maps.Map.prototype.addTileLayer = function(tileURL, options) {
  var options = options || {},
      interactivity = options.interactivity;
  if( options.interactivity ) {
    // windshaft needs the interactivity param to know what data to render
    options.grids = [ this.interactivityURL( tileURL, options.interactivity ) ];
  }
  // finish preparing the tile options hash
  var tilejson = $.extend(true, { }, {
    tiles: [ tileURL ],
    // wax needs template or it won't fire on events
    "template": "{{species_guess}}"
  }, options);
  var layer = new wax.g.connector( tilejson );
  var layerID =  this.overlayMapTypes.push( layer );
  if( options.disabled ) {
    this.overlayMapTypes.setAt( layerID - 1, null);
  }
  // add a utfgrid data layer and custom JS events to catch interactivity
  if( options.interactivity ) {
    this.addTileInteractivity( tilejson, options );
  }
  // return the layer and index of this layer in the current stack
  return { layer: layer, layerID: layerID };
}

google.maps.Map.prototype.interactivityURL = function( tileURL, interactivity ) {
  utfgridURL = tileURL.replace( /\.png/, ".grid.json" );
  utfgridURL += ( utfgridURL.indexOf("?") < 0 ) ? "?" : "&";
  return utfgridURL + "interactivity=" + interactivity;
};

google.maps.Map.prototype.addTileInteractivity = function( tilejson, options ) {
  var map = this;  
  wax.g
    .interaction()
    .map(map)
    .tilejson(tilejson)
    .on({
      on: function(o) {
        document.body.style.cursor = 'pointer'
        if (o.e.type == 'click') {
          // if the click is anywhere within the InfoWindow, don't act on it
          if($('.gm-style-iw').parent().find(o.e.target).length > 0) { return false; }
          if(o.data['latitude']){
            var latLng = new google.maps.LatLng(o.data['latitude'],o.data['longitude']);
            $.ajax({
              url: options.interact_url ? options.interact_url + '/observations/' + o.data['id'] + '.html?partial=cached_component' : '/observations/' + o.data['id'] + '.html?partial=cached_component',
              type: 'GET',
              dataType: 'html',
              beforeSend: function() {
                var iw = map.getInfoWindow()
                iw.position = latLng;
                //iw.content = $('<div class="loading status">'+I18n.t('loading')+'</div>').get(0)
                iw.setContent($('<div class="loading status">'+I18n.t('loading')+'</div>').get(0));
                iw.open(map);
                // remove any text highlighting, which happens when the user clicks around
                deselectText();
              },
              success: function(data) {
                var iw = map.getInfoWindow()
                iw.position = latLng;
                iw.setContent($('<div class="compact mini infowindow observations"></div>').append(data).get(0));
                //iw.content = $('<div class="compact mini infowindow observations"></div>').append(data).get(0)
                iw.open(map);
                // make sure the InfoWindow has focus
                $(iw).focus();
                // remove any text highlighting, which happens when the user clicks around
                deselectText();
              },
              error: function(jqXHR, textStatus, errorThrown) {
                console.log(textStatus);
              }
            });
          }
        } else if (o.e.type == 'mousemove') {
          map.setOptions({ draggableCursor: 'pointer' });
        }
      },
      off: function(o) {
        map.setOptions({ draggableCursor: 'url(http://maps.google.com/mapfiles/openhand.cur), move' });
      }
    });
};

// Static constants
iNaturalist.Map.ICONS = {
  DodgerBlue34: new google.maps.MarkerImage("<%= image_path('mapMarkers/mm_34_DodgerBlue.png') %>"),
  DeepPink34: new google.maps.MarkerImage("<%= image_path('mapMarkers/mm_34_DeepPink.png') %>"),
  iNatGreen34: new google.maps.MarkerImage("<%= image_path('mapMarkers/mm_34_iNatGreen.png') %>"),
  OrangeRed34: new google.maps.MarkerImage("<%= image_path('mapMarkers/mm_34_OrangeRed.png') %>"),
  DarkMagenta34: new google.maps.MarkerImage("<%= image_path('mapMarkers/mm_34_DarkMagenta.png') %>"),
  unknown34: new google.maps.MarkerImage("<%= image_path('mapMarkers/mm_34_unknown.png') %>"),
  ChromistaBrown34: new google.maps.MarkerImage("<%= image_path('mapMarkers/mm_34_ChromistaBrown.png') %>")
};

iNaturalist.Map.STEMLESS_ICONS = {
  DodgerBlue34: new google.maps.MarkerImage("<%= image_path('mapMarkers/mm_34_stemless_DodgerBlue.png') %>"),
  DeepPink34: new google.maps.MarkerImage("<%= image_path('mapMarkers/mm_34_stemless_DeepPink.png') %>"),
  iNatGreen34: new google.maps.MarkerImage("<%= image_path('mapMarkers/mm_34_stemless_iNatGreen.png') %>"),
  OrangeRed34: new google.maps.MarkerImage("<%= image_path('mapMarkers/mm_34_stemless_OrangeRed.png') %>"),
  DarkMagenta34: new google.maps.MarkerImage("<%= image_path('mapMarkers/mm_34_stemless_DarkMagenta.png') %>"),
  unknown34: new google.maps.MarkerImage("<%= image_path('mapMarkers/mm_34_stemless_unknown.png') %>"),
  ChromistaBrown34: new google.maps.MarkerImage("<%= image_path('mapMarkers/mm_34_stemless_ChromistaBrown.png') %>")
};

iNaturalist.Map.ICONIC_TAXON_ICONS = {
  Protozoa: iNaturalist.Map.ICONS.DarkMagenta34,
  Animalia: iNaturalist.Map.ICONS.DodgerBlue34,
  Plantae: iNaturalist.Map.ICONS.iNatGreen34,
  Fungi: iNaturalist.Map.ICONS.DeepPink34,
  Amphibia: iNaturalist.Map.ICONS.DodgerBlue34,
  Reptilia: iNaturalist.Map.ICONS.DodgerBlue34,
  Aves: iNaturalist.Map.ICONS.DodgerBlue34,
  Mammalia: iNaturalist.Map.ICONS.DodgerBlue34,
  Actinopterygii: iNaturalist.Map.ICONS.DodgerBlue34,
  Mollusca: iNaturalist.Map.ICONS.OrangeRed34,
  Insecta: iNaturalist.Map.ICONS.OrangeRed34,
  Arachnida: iNaturalist.Map.ICONS.OrangeRed34,
  Chromista: iNaturalist.Map.ICONS.ChromistaBrown34
};

iNaturalist.Map.STEMLESS_ICONIC_TAXON_ICONS = {
  Protozoa: iNaturalist.Map.STEMLESS_ICONS.DarkMagenta34,
  Animalia: iNaturalist.Map.STEMLESS_ICONS.DodgerBlue34,
  Plantae: iNaturalist.Map.STEMLESS_ICONS.iNatGreen34,
  Fungi: iNaturalist.Map.STEMLESS_ICONS.DeepPink34,
  Amphibia: iNaturalist.Map.STEMLESS_ICONS.DodgerBlue34,
  Reptilia: iNaturalist.Map.STEMLESS_ICONS.DodgerBlue34,
  Aves: iNaturalist.Map.STEMLESS_ICONS.DodgerBlue34,
  Mammalia: iNaturalist.Map.STEMLESS_ICONS.DodgerBlue34,
  Actinopterygii: iNaturalist.Map.STEMLESS_ICONS.DodgerBlue34,
  Mollusca: iNaturalist.Map.STEMLESS_ICONS.OrangeRed34,
  Insecta: iNaturalist.Map.STEMLESS_ICONS.OrangeRed34,
  Arachnida: iNaturalist.Map.STEMLESS_ICONS.OrangeRed34,
  Chromista: iNaturalist.Map.STEMLESS_ICONS.ChromistaBrown34
};

iNaturalist.Map.ICONIC_TAXON_COLORS = {
  Protozoa: '#8B008B', // 'DarkMagenta',
  Animalia: '#1E90FF', //'DodgerBlue',
  Plantae: '#73AC13',
  Fungi: '#FF1493', // 'DeepPink',
  Amphibia: '#1E90FF',
  Reptilia: '#1E90FF',
  Aves: '#1E90FF',
  Mammalia: '#1E90FF',
  Actinopterygii: '#1E90FF',
  Mollusca: '#FF4500', //'OrangeRed',
  Insecta: '#FF4500',
  Arachnida: '#FF4500',
  Chromista: '#993300'
}


})();
