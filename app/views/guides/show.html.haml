= content_for :title do
  = @guide.title
= content_for :extracss do
  :css
    .tile .img { display:block;height:200px; text-align:center; background-color:#eee;position:relative;overflow:hidden;}
    #actions {margin-top:15px;}
    #actions .pull-right {margin-left: 5px;}
    .taxonmap {height: 200px;}
    .bootstrap .thumbnails > li, .thumbnails h5 {margin-bottom:0;}
    .thumbnails .small {line-height:1;}
    #attribution ul {margin-left:0;}
    #attribution li {display:inline; font-size:90%;}
    #attribution li:after {content: ', ';}
    #attribution li:last-child:after {content: '';}
    .bootstrap .nav-list {padding-left: 0;}
    .bootstrap .nav > li {position:relative;}
    #nav li {padding-right:27px;}
    #nav li li {padding-right:0;}
    #nav .badge.modtag {
      display:none; 
      position:absolute; 
      right: 5px; 
      top:6px; 
      padding-left: 5px; 
      padding-right: 5px;
    }
    #nav .badge.modtag a {color:white; text-decoration: none;}
    #nav li:hover .badge.modtag {display:block;}
    #nav .addtag {background-color: #73AC13;}
    #nav .badge {position:relative; top:-2px;}
    #nav .taxon .othernames {display:block; color:#aaa;}
    #nav a .taxon:hover {
      color: inherit;
      text-decoration: none;
    }
    .modal form {margin-bottom:0;}
    #new_guide_pdf_flow_task .img {height: 170px;}
    #new_guide_pdf_flow_task .img img {opacity:0.5; max-width: auto;}
    label.disabled {opacity:0.5;}
= content_for :extrajs do
  = google_maps_js
  = javascript_include_tag "underscore.min", "map_bundle"
  :javascript
    var GUIDE = #{json_escape @guide.to_json.html_safe}
    $('.tile .img').imagesLoaded(function() {
      $('img', this).not('.iconic').centerInContainer()
    })
    $('.clearbtn').click(function() {
      $(this).siblings(':input').val(null)
    })
    $('.taxonmap').waypoint(function() {
      if ($(this).data('taxonMap')) return
      $(this).taxonMap()
    }, {
      triggerOnce: true,
      offset: '100%'
    })
    $('#new_guide_pdf_flow_task input[type=submit]').click(function() {
      if ($('#guide_pdf_flow_task_options_query_all:checked').length > 0) {
        checkForExistingDefaultPdf()
      } else {
        createFlowTask()
      }
      return false
    })
    function checkForExistingDefaultPdf() {
      var layout = $('#new_guide_pdf_flow_task input[name*=layout]:checked').val(),
          pdfUrl = '/guides/'+GUIDE.id+'.'+layout+'.pdf'
      // send HEAD request to see if PDF exists
      $.ajax({
        type: 'HEAD',
        url: pdfUrl,
        statusCode: {
          200: function() {
            // if exists, open that in new window and cancel form submission
            window.open(pdfUrl, '_self')
          },
          404: function() {
            // else submit the form
            createFlowTask()
          }
        }
      })
    }
    function createFlowTask() {
      loadingClickForButton.apply($('.modal:visible input[data-loading-click]').get(0), [{ajax:false}])
      $('.modal:visible .patience').show()
      $('#new_guide_pdf_flow_task').submit()
    }
    $('#printbtn').click(function() {
      var layout = $('#new_guide_pdf_flow_task input[name*=layout]:checked').val(),
          printUrl = window.location.pathname.replace(/\.+/, '') + '.' + layout+'.pdf'
      if ($('#guide_pdf_flow_task_options_query_all:checked').length == 0) {
        if (window.location.search.length == 0) { printUrl += "?print=t" }
        else { printUrl += window.location.search + '&print=t' }
      } else {
        printUrl = printUrl.replace(/\.pdf\??.*$/, '.pdf?print=t')
      }
      var w = window.open(printUrl, '_blank')
      return false
    })
    $('#new_guide_pdf_flow_task').bind('ajax:success', function(e, json) {
      // on form submit success, hit flow_tasks/run and wait until flow task is complete
      var runUrl = '/flow_tasks/'+json.id+'/run.json',
          pdfUrl = '/guides/'+GUIDE.id
      runFlowTask(runUrl, pdfUrl)
      // open url in new window when complete and close modal
    })
    window.runFlowTask = function(runUrl, pdfUrl) {
      window.delayedLinkTries = (window.delayedLinkTries || 0) + 1
      if (window.delayedLinkTries > 20) {
        $('.modal:visible .patience').hide()
        var btn = $('.modal.visible input[data-loading-click]')
        btn.attr('disabled', false).removeClass('disabled description')
        btn.val(btn.data('original-value'))
        alert('This seems to be taking forever.  Please try again later.')
        return
      }
      $.ajax({
        url: runUrl,
        type: 'get',
        dataType: 'json',
        statusCode: {
          // Accepted: request acnkowledged but file hasn't been generated
          202: function() {
            setTimeout('runFlowTask("'+runUrl+'", "'+pdfUrl+'")', 5000)
          },
          // OK: file is ready
          200: function(flowTask) {
            $('.modal:visible .patience').hide()
            var btn = $('.modal.visible input[data-loading-click]')
            btn.attr('disabled', false).removeClass('disabled description')
            btn.val(btn.data('original-value'))
            var redirectUrl = flowTask.redirect_url
            if (redirectUrl.match(/\?/)) { redirectUrl += '&flow_task_id='+flowTask.id }
            else { redirectUrl += '?flow_task_id='+flowTask.id }
            window.open(redirectUrl, '_self')
          }
        }
      }).error(function(arguments) {
        // console.log("[DEBUG] error: ", arguments)
      })
    }
.container-fluid
  %ul.breadcrumb
    %li
      = link_to t(:guides), guides_path
      %span.divider /
      %li.active= @guide.title
  - unless @guide.published?
    .alert.text-center
      %strong= t(:draft, :default => "draft").upcase
      =t 'views.guides.show.draft_desc' 
  .row-fluid
    .span12
      #actions.right
        - if @guide.downloadable?
          - if @guide.ngz.file?
            .btn.pull-left.btn-link{:disabled => true, :data => {:tip => t('views.guides.mobile_downloads_tip_html', :iphone_url => CONFIG.iphone_app_url), :tip_position_at => "bottom center", :tip_width => 200, :tip_hide_delay => 200}}
              %i.fa-mobile.fa
              =t :offline_access_enabled
              - if @guide.editable_by?(current_user)
                = link_to "(#{t(:disable)})".html_safe, guide_path(@guide, :guide => {:downloadable => false}), :method => :put
          - else
            .btn.pull-left.btn-link{:disabled => true, :data => {:tip => t('views.guides.generating_mobile_archive_tip_html'), :tip_position_at => "bottom center", :tip_width => 200, :tip_hide_delay => 200}}
              %span.loading.status.inlineblock
                = succeed '&hellip;'.html_safe do
                  =t(:generating_mobile_archive)
              - if @guide.editable_by?(current_user)
                = link_to "(#{t(:stop)})".html_safe, guide_path(@guide, :guide => {:downloadable => false}), :method => :put
        - if @guide.editable_by?(current_user)
          - if !@guide.ngz_url && !@guide.downloadable?
            %button.btn.pull-left{:type => "button", :role => "button", "data-toggle" => "modal", "data-target" => "#mobile_dialog"}
              %i.fa-mobile.fa
              =t :enable_offline_access
        .btn-group.pull-right
          %button.btn{:type => "button", :role => "button", "data-toggle" => "modal", "data-target" => "#pdf_dialog"}
            %i.fa.fa-print
            =t :pdf_slash_print
          - if @guide.editable_by?(current_user)
            = link_to edit_guide_path(@guide), :class => "btn" do
              %i.fa.fa-edit
              = t(:edit)
            - unless @guide.published?
              = link_to t(:publish), guide_path(@guide, :publish => true), :method => :put, :class => "btn btn-primary"
      %h1
        - if @guide.icon.file?
          = image_tag @guide.icon.url(:thumb), :class => "left img-rounded"
        = @guide.title
  .row-fluid
    .span12
      = truncate_with_more formatted_user_text(@guide.description), :length => 300
  .row-fluid
    #nav.span3
      %ul#tags.nav.nav-stacked.nav-pills
        %li{:class => @tags.blank? && @taxon.blank? ? "active" : nil}
          = link_to url_for_params(:without => [:page, :taxon, :tag, :tags]) do
            = t(:all)
            %span.badge.pull-right= @guide.guide_taxa.count
        - for predicate, tags in @nav_tags.sort_by{|p,t| p}
          - pred = t(predicate.underscore.downcase).is_a?(String) ? t(predicate.underscore.downcase, :default => predicate.humanize) : predicate
          %li.nav-header= pred
          - for tag, value, count in tags.sort_by{|t,v,c| v}
            %li{:class => @tags.include?(tag) ? "active" : nil}
              = link_to url_for_params(:tags => [tag], :without => [:page]) do
                = value
                %span.badge.pull-right= count
              %span.badge.modtag{:class => @tags.include?(tag) ? "removetag" : "addtag"}
                - if @tags.include?(tag)
                  = link_to "x", url_for_params(:tags => (@tags - [tag]).flatten.uniq)
                - else
                  = link_to "+", url_for_params(:tags => [@tags, tag].flatten.uniq)
      %ul#taxonomy.nav.nav-stacked.nav-pills
        %li.nav-header=t :taxonomy
        - nav_taxa = capture do
          - for taxon in @nav_taxa
            %li
              = link_to url_for_params(:taxon => taxon.id, :without => [:page]) do
                %span.badge.right= @nav_taxa_counts[taxon.id]
                = render "shared/taxon", :taxon => taxon, :include_parens => false
        - if @taxon
          - subnav_taxa = capture do
            %li.active
              = link_to url_for_params(:taxon => @taxon.id, :without => [:page]) do
                %span.badge.right= @nav_taxa_counts[@taxon.id]
                = render "shared/taxon", :taxon => @taxon, :include_parens => false
              %ul.nav.nav-stacked.nav-pills
                = nav_taxa
          - if @guide.taxon && !@guide.taxon.ancestor_ids.include?(@taxon.parent_id)
            %li.active
              = link_to url_for_params(:taxon => @taxon.parent_id, :without => [:page]) do
                &laquo;
                =t :back_to
                = render "shared/taxon", :taxon => @taxon.parent, :include_parens => false
              %ul.nav.nav-stacked.nav-pills
                = subnav_taxa
          - else
            = subnav_taxa
        - else
          = nav_taxa
    .span9
      .row-fluid.stacked
        .navbar
          .nabar-inner
            %form.navbar-search.pull-left
              .input-append
                %input{:type => "text", :placeholder => t(:search), :name => "q", :value => @q}
                - unless @q.blank?
                  %button.btn.clearbtn= t(:clear).capitalize
                %button.btn=t :search
            .pull-right
              %span.dropdown.inlineblock
                %button.btn{:data => {:toggle => "dropdown"}}
                  =t :sort
                  %b.caret
                %ul.dropdown-menu.pull-right{:role => "menu"}
                  - for sort in GuideTaxon::SORTS
                    %li= link_to t("views.guides.sorts.#{sort}"), url_for_params(:sort => sort), :tabindex => -1, :class => "#{'active' if @sort == sort}"
              .btn-group{"data-toggle" => "buttons-radio"}
                = link_to t(:grid).capitalize, url_for_params(:view => "grid"), :class => "btn #{'active' if @view == "grid"}"
                = link_to t(:card).capitalize, url_for_params(:view => "card"), :class => "btn #{'active' if @view == "card"}"
      - if @guide_taxa.blank?
        .nocontent.meta
          =t :no_matching_species
      - elsif @view == "card"
        - for guide_taxon in @guide_taxa
          .card.row-fluid.stacked
            .span3
              = link_to guide_taxon, :class => "img" do
                - if gp = guide_taxon.default_guide_photo
                  = image_tag gp.photo.small_url
                - elsif guide_taxon.taxon
                  = iconic_taxon_image guide_taxon.taxon
            .span6
              %h4.name
                = link_to guide_taxon.display_name, guide_taxon
              - if gs = guide_taxon.guide_sections.first
                = truncate_with_more formatted_user_text(gs.description), :length => 400
            .span3
              .map
                - if guide_taxon.guide_ranges.blank? && guide_taxon.taxon
                  .taxonmap{setup_map_tag_attrs(:taxon => guide_taxon.taxon, :show_range => true, :place => @guide.place, :latitude => @guide.latitude, :longitude => @guide.longitude, :map_type => @guide.map_type, :zoom_level => @guide.zoom_level, :map_type_control => "false")}
                - elsif gr = guide_taxon.guide_ranges.first
                  = image_tag gr.original_url
      - else
        - for row in @guide_taxa.in_groups_of(4)
          .row-fluid.stacked
            %ul.thumbnails
              - for guide_taxon in row.compact
                %li.span3
                  - if gp = guide_taxon.default_guide_photo
                    = link_to image_tag(gp.photo.small_url), guide_taxon, :class => "thumbnail borderless"
                  - elsif guide_taxon.taxon
                    = link_to iconic_taxon_image(guide_taxon.taxon), guide_taxon, :class => "thumbnail"
                  %h5
                    - if guide_taxon.display_name == guide_taxon.name
                      = link_to guide_taxon do
                        %i= guide_taxon.display_name
                      = cite(gp.attribution) if gp
                    - elsif guide_taxon.display_name.blank?
                      = link_to guide_taxon do
                        %i= guide_taxon.name
                      = cite(gp.attribution) if gp
                    - else
                      = link_to guide_taxon do
                        = guide_taxon.display_name
                      = cite(gp.attribution) if gp
                      .quiet
                        %small
                          %i= guide_taxon.name
        = will_paginate @guide_taxa
  #attribution.meta.upstacked
    %p
      =t :edited_by
      - attribution_links = commas_and(@guide.guide_users.map{|gu| link_to_user(gu.user, :content_text => gu.user.name.blank? ? gu.user.login : gu.user.name)})
      - if @guide.license.blank?
        = attribution_links
      - else
        = succeed ',' do
          = attribution_links
        = t(:some_rights_reserved).downcase
        = surround '(', ')' do
          = link_to @guide.license.gsub(/CC-/, 'CC '), url_for_license(@guide.license)
    - unless @guide.source_url.blank?
      %p=t :originally_imported_from_url_html, :url => @guide.source_url
    - unless @_citations.blank?
      %p
        =t :photo_credits
        = references(:linked => true)
    = render :partial => "shared/flagging", :locals => { :instance => @guide }

#pdf_dialog.modal.fade.hide
  .modal-header
    %button.close{:type => "button", "data-dismiss" => "modal"} x
    %h3=t :generate_pdf
  = form_for GuidePdfFlowTask.new, :url => flow_tasks_url, :remote => true, :html => {'data-type' => 'json'} do |f|
    .modal-body
      = f.fields_for :inputs, f.object.inputs.build(:resource => @guide) do |fi|
        = fi.hidden_field :resource_type
        = fi.hidden_field :resource_id
      %label=t :layout
      .row-fluid
        - GuidePdfFlowTask::LAYOUTS.each do |l|
          %div{:class => "span#{12 / GuidePdfFlowTask::LAYOUTS.size}"}
            = f.label :options, :value => l, :class => "radio" do
              .img= image_tag "guide-#{l}-icon.png"
              = f.radio_button :options, l, :name => "guide_pdf_flow_task[options][layout]", :checked => (l == GuidePdfFlowTask::GRID ? "checked" : nil)
              = t "views.guides.pdf_layouts.#{l}", :default => l
              .small.meta=t "views.guides.pdf_layout_notes.#{l}", :default => ""
      .row-fluid=t :taxa_to_include
      #pdf_taxa.row-fluid
        = f.fields_for :options do |fo|
          = fo.label :query, :value => "all", :class => "span6 radio" do
            = fo.radio_button :query, "all", :checked => true
            =t :all_taxa_in_this_guide
          - filter_match_enabled = [@tags, @q, @taxon].map(&:blank?).include?(false)
          = fo.label :query, :value => request.query_string, :class => "span6 radio #{'disabled' unless filter_match_enabled}" do
            = fo.radio_button :query, request.query_string, :checked => false, :disabled => !filter_match_enabled
            =t :x_taxa_matching_current_filters, :count => @guide_taxa.total_entries
    .modal-footer
      = f.submit t(:generate_pdf), :class => "btn btn-primary", :data => {'loading-click' => t(:generating)}
      = link_to "#{t :preview} / #{t(:print_in_browser)}", guide_pdf_path(@guide, :layout => "grid", :print => "t"), :id => "printbtn", :class => "btn", :target => "_blank"
      .meta.patience.hide=t 'views.guides.pdf_generation_notice'

- if @guide.editable_by?(current_user)
  #mobile_dialog.modal.fade.hide
    .modal-header
      %button.close{:type => "button", "data-dismiss" => "modal"} x
      %h3=t :enable_offline_access_for_iphone
    = form_for @guide do |f|
      .modal-body
        = f.hidden_field :downloadable, :value => true
        .row-fluid
          .span3.text-center
            %i.fa.fa-mobile.fa-6{:style => "font-size:200px;width:100px;line-height:1;"}
          .span9
            %p=t 'views.guides.mobile_downloads_help_html'
      .modal-footer
        %button.btn{"data-dismiss" => "modal"}=t :cancel
        = f.submit t(:enable_offline_access), :class => "btn btn-primary", :data => {'loading-click' => true}
