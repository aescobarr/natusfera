= content_for :title do
  =t :guides
= content_for :extracss do
  = stylesheet_link_tag "guides"
  :css
    .hero-unit .or {margin: 0 1em;}
    .bootstrap .nav-pills > .active.back > a, .bootstrap .nav-pills > .active.back > a:hover, .bootstrap .nav-pills > .active.back > a:focus {
      background-color: #eee;
      color:#333;
    }
    #taxonomy .taxon .othernames {display:block; color:#aaa;}
    #taxonomy a .taxon:hover {
      color: inherit;
      text-decoration: none;
    }
    .iconic_taxon_sprite {margin-right:5px;}
    #guidesheader {
      background: url(#{image_url('guidesbg1.jpg')}) no-repeat;
      background-color:black;
      color:white;
      background-position: right top;
      overflow:hidden;
    }
    #guidesheader.logged_in {padding-bottom:0; }
    #guidesheader .nav-tabs {margin-bottom:0; position:relative;top:1px; border-bottom:1px solid white;}
    #guidesheader .nav-tabs a {color:white;}
    #guidesheader .nav-tabs .active a {color:#08c;}
    #guidesheader h1 {font-size:250%;text-shadow: 0px 1px 10px black;}
    #guidesheader h1 a { color: white; text-decoration: none;}
    #guidesheader p {font-size:100%; text-shadow: 0px 1px 5px black; }
    #guidesheader .nav-tabs a, #guidesheader .nav-tabs a:hover, #guidesheader .nav-tabs a:focus {border: 0 transparent;}
    #guidesheader .nav > li.inactive > a:hover,
    #guidesheader .nav > li.inactive > a:focus {
      text-decoration: none;
      background-color: black;
      opacity: 0.5;
    }
= content_for :extrajs do
  :javascript
    $('#placechooser').chooser({
      collectionUrl: '/places/autocomplete.json',
      resourceUrl: '/places/{{id}}.json?partial=autocomplete_item'
    })
.container-fluid
  #guidesheader.hero-unit.clear{:class => logged_in? ? 'logged_in' : nil}
    %h1= link_to t(:welcome_to_guides, :site_name => SITE_NAME), guides_path
    %p
      =t 'views.guides.index.welcome_message_html'
    .text
      = form_tag search_guides_path, :method => :get, :class => "form-search form-inline" do
        .input-append
          = text_field_tag :q, nil, :placeholder => t(:find_a_guide), :class => "search-query input-xlarge"
          = submit_tag t(:search), :class => "btn btn-primary"
        %nobr
          %span.or
            =t :or
          = link_to t(:create_a_guide), new_guide_path, :class => "btn"
    - if logged_in?
      %ul.nav.nav-tabs.pull-right
        %li{:class => params[:by] == "you" ? "inactive" : "active"}= link_to t(:by_everyone), url_for_params(:without => [:by, :page])
        %li{:class => params[:by] != "you" ? "inactive" : "active"}= link_to t(:by_you), url_for_params(:by => "you", :without => [:page])
  .row-fluid
    .span3
      %ul#places.nav.nav-stacked.nav-pills
        %li.nav-header
          - if @place
            .right= link_to t(:all), url_for_params(:without => [:place_id])
          =t :places
        - nav_places = capture do
          - for place in @nav_places
            %li
              = link_to url_for_params(:place_id => place.id, :without => [:page]) do
                %span.badge.right= @nav_places_counts[place.id]
                =t 'places_name.'+place.name.downcase.gsub(' ','_'), :default => place.name
                - if place.place_type_name
                  .muted
                    %small= t("place_geo.geo_planet_place_types.#{place.place_type_name.to_s.gsub(' ','_')}", :default => place.place_type_name)
        - if @place
          - subnav_places = capture do
            %li.active
              = link_to url_for_params(:place_id => @place.id, :without => [:page]) do
                %span.badge.right= @nav_places_counts[@place.id]
                =t @place.name, :default => @place.name
              %ul.nav.nav-stacked.nav-pills
                = nav_places
          %li.active.back
            - unless @place == @root_place
              = link_to url_for_params(:place_id => @place.parent_id, :without => [:page]), :class => "prev" do
                =t :back_to
                - if @place.parent
                  =t @place.parent.name, :default => @place.parent.name
                - else
                  = t(:all_places, :default => "all places").downcase
            %ul.nav.nav-stacked.nav-pills
              = subnav_places
        - else
          = nav_places
      %ul#taxonomy.nav.nav-stacked.nav-pills
        %li.nav-header
          - if @taxon
            .right= link_to t(:all), url_for_params(:without => [:taxon_id])
          =t :organisms
        - nav_taxa = capture do
          - for taxon in @nav_taxa
            %li
              = link_to url_for_params(:taxon_id => taxon.id, :without => [:page]) do
                %span.badge.right= @nav_taxa_counts[taxon.id]
                .iconic_taxon_sprite.selected.pull-left{:class => taxon.iconic_taxon_name.to_s.downcase.underscore}
                = render "shared/taxon", :taxon => taxon, :include_parens => false
        - if @taxon && @taxon != Taxon::LIFE
          - subnav_taxa = capture do
            %li.active
              = link_to url_for_params(:taxon_id => @taxon.id, :without => [:page]) do
                %span.badge.right= @nav_taxa_counts[@taxon.id]
                = render "shared/taxon", :taxon_id => @taxon, :include_parens => false
              %ul.nav.nav-stacked.nav-pills
                = nav_taxa
          %li.active.back
            - if @taxon.parent_id == Taxon::LIFE.id
              = link_to url_for_params(:without => [:page, :taxon_id]), :class => "prev" do
                =t :back_to
                = t(:all_life)
            - else
              = link_to url_for_params(:taxon_id => @taxon.parent_id, :without => [:page]), :class => "prev" do
                =t :back_to
                = render "shared/taxon", :taxon => @taxon.parent, :include_parens => false
            %ul.nav.nav-stacked.nav-pills
              = subnav_taxa
        - else
          = nav_taxa
    .span9
      - for row in @guides.in_groups_of(2)
        .row-fluid.stacked
          - for guide in row.compact
            .span6
              = render 'media_object', :guide => guide, :img_class => "span4"
  .quiet.box.text-center.upstacked
    =t 'views.guides.index.funding_html'
